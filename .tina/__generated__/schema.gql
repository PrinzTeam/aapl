# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getHomeDocument(relativePath: String): HomeDocument!
  getHomeList(before: String, after: String, first: Int, last: Int): HomeConnection!
  getArttalksDocument(relativePath: String): ArttalksDocument!
  getArttalksList(before: String, after: String, first: Int, last: Int): ArttalksConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PostsDocument | HomeDocument | ArttalksDocument

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type HomeDescription {
  en: String
  fr: String
  kor: String
}

type HomeDaysTitle {
  en: String
  fr: String
  kor: String
}

type HomeDaysSubtitle {
  en: String
  fr: String
  kor: String
}

type HomeDays {
  title: HomeDaysTitle
  subtitle: HomeDaysSubtitle
}

type Home {
  description: HomeDescription
  days: [HomeDays]
}

type HomeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Home!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type HomeConnectionEdges {
  cursor: String
  node: HomeDocument
}

type HomeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [HomeConnectionEdges]
}

type ArttalksMainTitle {
  en: String
  fr: String
  kor: String
}

type ArttalksDescription {
  en: String
  fr: String
  kor: String
}

type ArttalksDaysTitle {
  en: String
  fr: String
  kor: String
}

type ArttalksDaysSubtitle {
  en: String
  fr: String
  kor: String
}

type ArttalksDaysBodyTextTitle {
  en: String
  fr: String
  kor: String
}

type ArttalksDaysBodyText {
  title: ArttalksDaysBodyTextTitle
}

type ArttalksDaysBodyVideo {
  vimeoUrl: String
}

type ArttalksDaysBodyImageCaption {
  en: String
  fr: String
  kor: String
}

type ArttalksDaysBodyImage {
  caption: ArttalksDaysBodyImageCaption
  imageUrl: String
}

union ArttalksDaysBody = ArttalksDaysBodyText | ArttalksDaysBodyVideo | ArttalksDaysBodyImage

type ArttalksDays {
  title: ArttalksDaysTitle
  subtitle: ArttalksDaysSubtitle
  body: [ArttalksDaysBody]
}

type Arttalks {
  mainTitle: ArttalksMainTitle
  description: ArttalksDescription
  days: [ArttalksDays]
}

type ArttalksDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Arttalks!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ArttalksConnectionEdges {
  cursor: String
  node: ArttalksDocument
}

type ArttalksConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [ArttalksConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  updateArttalksDocument(relativePath: String!, params: ArttalksMutation!): ArttalksDocument!
}

input DocumentMutation {
  posts: PostsMutation
  home: HomeMutation
  arttalks: ArttalksMutation
}

input PostsMutation {
  title: String
  body: String
}

input HomeDescriptionMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysTitleMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysSubtitleMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysMutation {
  title: HomeDaysTitleMutation
  subtitle: HomeDaysSubtitleMutation
}

input HomeMutation {
  description: HomeDescriptionMutation
  days: [HomeDaysMutation]
}

input ArttalksMainTitleMutation {
  en: String
  fr: String
  kor: String
}

input ArttalksDescriptionMutation {
  en: String
  fr: String
  kor: String
}

input ArttalksDaysTitleMutation {
  en: String
  fr: String
  kor: String
}

input ArttalksDaysSubtitleMutation {
  en: String
  fr: String
  kor: String
}

input ArttalksDaysBodyTextTitleMutation {
  en: String
  fr: String
  kor: String
}

input ArttalksDaysBodyTextMutation {
  title: ArttalksDaysBodyTextTitleMutation
}

input ArttalksDaysBodyVideoMutation {
  vimeoUrl: String
}

input ArttalksDaysBodyImageCaptionMutation {
  en: String
  fr: String
  kor: String
}

input ArttalksDaysBodyImageMutation {
  caption: ArttalksDaysBodyImageCaptionMutation
  imageUrl: String
}

input ArttalksDaysBodyMutation {
  text: ArttalksDaysBodyTextMutation
  video: ArttalksDaysBodyVideoMutation
  image: ArttalksDaysBodyImageMutation
}

input ArttalksDaysMutation {
  title: ArttalksDaysTitleMutation
  subtitle: ArttalksDaysSubtitleMutation
  body: [ArttalksDaysBodyMutation]
}

input ArttalksMutation {
  mainTitle: ArttalksMainTitleMutation
  description: ArttalksDescriptionMutation
  days: [ArttalksDaysMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  