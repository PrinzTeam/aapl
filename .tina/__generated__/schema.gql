# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getHomeDocument(relativePath: String): HomeDocument!
  getHomeList(before: String, after: String, first: Int, last: Int): HomeConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PostsDocument | HomeDocument

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type HomeMainTitle {
  en: String
  fr: String
  kor: String
}

type HomeDescription {
  en: String
  fr: String
  kor: String
}

type HomeDaysTitle {
  en: String
  fr: String
  kor: String
}

type HomeDaysSubtitle {
  en: String
  fr: String
  kor: String
}

type HomeDaysBodyTextTitle {
  en: String
  fr: String
  kor: String
}

type HomeDaysBodyText {
  title: HomeDaysBodyTextTitle
}

type HomeDaysBodyVideo {
  vimeoUrl: String
}

type HomeDaysBodyImageCaption {
  en: String
  fr: String
  kor: String
}

type HomeDaysBodyImage {
  caption: HomeDaysBodyImageCaption
  imageUrl: String
}

union HomeDaysBody = HomeDaysBodyText | HomeDaysBodyVideo | HomeDaysBodyImage

type HomeDays {
  title: HomeDaysTitle
  subtitle: HomeDaysSubtitle
  body: [HomeDaysBody]
}

type Home {
  mainTitle: HomeMainTitle
  description: HomeDescription
  days: [HomeDays]
}

type HomeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Home!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type HomeConnectionEdges {
  cursor: String
  node: HomeDocument
}

type HomeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [HomeConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
}

input DocumentMutation {
  posts: PostsMutation
  home: HomeMutation
}

input PostsMutation {
  title: String
  body: String
}

input HomeMainTitleMutation {
  en: String
  fr: String
  kor: String
}

input HomeDescriptionMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysTitleMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysSubtitleMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysBodyTextTitleMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysBodyTextMutation {
  title: HomeDaysBodyTextTitleMutation
}

input HomeDaysBodyVideoMutation {
  vimeoUrl: String
}

input HomeDaysBodyImageCaptionMutation {
  en: String
  fr: String
  kor: String
}

input HomeDaysBodyImageMutation {
  caption: HomeDaysBodyImageCaptionMutation
  imageUrl: String
}

input HomeDaysBodyMutation {
  text: HomeDaysBodyTextMutation
  video: HomeDaysBodyVideoMutation
  image: HomeDaysBodyImageMutation
}

input HomeDaysMutation {
  title: HomeDaysTitleMutation
  subtitle: HomeDaysSubtitleMutation
  body: [HomeDaysBodyMutation]
}

input HomeMutation {
  mainTitle: HomeMainTitleMutation
  description: HomeDescriptionMutation
  days: [HomeDaysMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  